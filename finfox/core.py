"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['pdf2img', 'make_dirs', 'download_url', 'rn_zip_extract', 'download_rename', 'save_md', 'qwen_resize']

# %% ../nbs/00_core.ipynb 3
import httpx
import zipfile
from fastcore.all import *
import pandas as pd

# %% ../nbs/00_core.ipynb 5
def make_dirs(base, df):
    base.mkdir(exist_ok=True)
    for c in df.columns:
        dir = base/c
        dir.mkdir(exist_ok=True)
        for i in df.index:
            if "Right " not in i:
                (dir/i).mkdir(exist_ok=True)

# %% ../nbs/00_core.ipynb 9
def download_url(url, fn):
    """
    download given url and write it a given fn
    """
    res = httpx.get(url)
    if res.status_code == 200:
        with open(fn, 'wb') as f:
            fn.write_bytes(res.content)
        return True
    else:
        print(f"Error downloading: Status code {res.status_code}")
        return False

# %% ../nbs/00_core.ipynb 12
def rn_zip_extract(zipf, fn):
    """
    Donwload and extract the given files with filename fn 
    """
    home = Path(zipf).parent
    with zipfile.ZipFile(zipf, 'r') as zip_ref:
        f = zip_ref.namelist()[0]
        zip_ref.extractall(path=home)
        fi = home/f
        fi.rename(fn)


# %% ../nbs/00_core.ipynb 15
def download_rename(url, fn, dir):
    """
    download given url and rename the file only handles zip and pdf
    """
    fn, dir = Path(fn), Path(dir)
    dir.mkdir(exist_ok=True)
    fn = dir/fn
    if ".zip" in url:
        zip = dir/"temp.zip"
        download_url(url, zip)
        rn_zip_extract(zip, fn)
        Path(dir/"temp.zip").unlink()
    elif ".pdf" in url:
        download_url(url, fn)

# %% ../nbs/00_core.ipynb 17
from pdf2image import convert_from_path
from PIL.PpmImagePlugin import PpmImageFile
pdf2img = lambda x : convert_from_path(str(x), dpi=250)

# %% ../nbs/00_core.ipynb 19
def save_md(fn: str, txt: str):
    """
    Writes the given text to a markdown file as binary (UTF-8 encoded).
    Parameters:
    fn (str): Filename or path to save the markdown file.
    txt (str): Content to write to the file.
    """
    try:
        # Open the file in binary write mode and encode the text to bytes
        with open(fn, 'wb') as f:
            f.write(txt.encode('utf-8'))
    except Exception as e:
        print(f"Error writing to file {fn}: {e}")
    

# %% ../nbs/00_core.ipynb 22
import math 
from PIL import Image
def qwen_resize(im:Image.Image, limit:int=1280*28*28, fn:str="temp.png" ):
    """
    check if the image of size `1280*28*28` which is the upper limit of image can be processed by 
    **QWEN VLM**.
    """
    w, h = im.size

    sf = math.sqrt( limit/(w*h))
    if sf < 1.:
        nw = int(w * sf)
        nh = int(h * sf)
        im = im.resize((nw,nh), Image.BICUBIC)

    im.save(fn)
